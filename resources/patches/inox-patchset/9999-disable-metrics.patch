--- a/base/metrics/histogram.cc
+++ b/base/metrics/histogram.cc
@@ -147,7 +147,8 @@ class Histogram::Factory {
 };
 
 HistogramBase* Histogram::Factory::Build() {
-  HistogramBase* histogram = StatisticsRecorder::FindHistogram(name_);
+  std::string name__ = "Dummy";
+  HistogramBase* histogram = StatisticsRecorder::FindHistogram(name__);
   if (!histogram) {
     // To avoid racy destruction at shutdown, the following will be leaked.
     const BucketRanges* created_ranges = CreateRanges();
@@ -176,7 +177,7 @@ HistogramBase* Histogram::Factory::Build
     if (allocator) {
       tentative_histogram = allocator->AllocateHistogram(
           histogram_type_,
-          name_,
+          name__,
           minimum_,
           maximum_,
           registered_ranges,
@@ -217,7 +218,7 @@ HistogramBase* Histogram::Factory::Build
     ReportHistogramActivity(*histogram, HISTOGRAM_LOOKUP);
   }
 
-  CHECK_EQ(histogram_type_, histogram->GetHistogramType()) << name_;
+  /*CHECK_EQ(histogram_type_, histogram->GetHistogramType()) << name_;
   if (bucket_count_ != 0 &&
       !histogram->HasConstructionArguments(minimum_, maximum_, bucket_count_)) {
     // The construction arguments do not match the existing histogram.  This can
@@ -228,7 +229,7 @@ HistogramBase* Histogram::Factory::Build
     // crash.
     DLOG(ERROR) << "Histogram " << name_ << " has bad construction arguments";
     return nullptr;
-  }
+  }*/
   return histogram;
 }
 
@@ -441,20 +442,6 @@ void Histogram::Add(int value) {
 }
 
 void Histogram::AddCount(int value, int count) {
-  DCHECK_EQ(0, ranges(0));
-  DCHECK_EQ(kSampleType_MAX, ranges(bucket_count()));
-
-  if (value > kSampleType_MAX - 1)
-    value = kSampleType_MAX - 1;
-  if (value < 0)
-    value = 0;
-  if (count <= 0) {
-    NOTREACHED();
-    return;
-  }
-  unlogged_samples_->Accumulate(value, count);
-
-  FindAndRunCallback(value);
 }
 
 std::unique_ptr<HistogramSamples> Histogram::SnapshotSamples() const {
@@ -490,11 +477,10 @@ std::unique_ptr<HistogramSamples> Histog
 }
 
 void Histogram::AddSamples(const HistogramSamples& samples) {
-  unlogged_samples_->Add(samples);
 }
 
 bool Histogram::AddSamplesFromPickle(PickleIterator* iter) {
-  return unlogged_samples_->AddFromPickle(iter);
+  return true;
 }
 
 // The following methods provide a graphical histogram display.
--- a/base/metrics/sparse_histogram.cc
+++ b/base/metrics/sparse_histogram.cc
@@ -24,7 +24,8 @@ typedef HistogramBase::Sample Sample;
 // static
 HistogramBase* SparseHistogram::FactoryGet(const std::string& name,
                                            int32_t flags) {
-  HistogramBase* histogram = StatisticsRecorder::FindHistogram(name);
+  std::string name__ = "Dummy";
+  HistogramBase* histogram = StatisticsRecorder::FindHistogram(name__);
   if (!histogram) {
     // Try to create the histogram using a "persistent" allocator. As of
     // 2016-02-25, the availability of such is controlled by a base::Feature
@@ -36,7 +37,7 @@ HistogramBase* SparseHistogram::FactoryG
     PersistentHistogramAllocator* allocator = GlobalHistogramAllocator::Get();
     if (allocator) {
       tentative_histogram = allocator->AllocateHistogram(
-          SPARSE_HISTOGRAM, name, 0, 0, nullptr, flags, &histogram_ref);
+          SPARSE_HISTOGRAM, name__, 0, 0, nullptr, flags, &histogram_ref);
     }
 
     // Handle the case where no persistent allocator is present or the
@@ -68,7 +69,7 @@ HistogramBase* SparseHistogram::FactoryG
     ReportHistogramActivity(*histogram, HISTOGRAM_LOOKUP);
   }
 
-  CHECK_EQ(SPARSE_HISTOGRAM, histogram->GetHistogramType());
+  //CHECK_EQ(SPARSE_HISTOGRAM, histogram->GetHistogramType());
   return histogram;
 }
 
@@ -105,16 +106,6 @@ void SparseHistogram::Add(Sample value)
 }
 
 void SparseHistogram::AddCount(Sample value, int count) {
-  if (count <= 0) {
-    NOTREACHED();
-    return;
-  }
-  {
-    base::AutoLock auto_lock(lock_);
-    unlogged_samples_->Accumulate(value, count);
-  }
-
-  FindAndRunCallback(value);
 }
 
 std::unique_ptr<HistogramSamples> SparseHistogram::SnapshotSamples() const {
@@ -150,13 +141,10 @@ std::unique_ptr<HistogramSamples> Sparse
 }
 
 void SparseHistogram::AddSamples(const HistogramSamples& samples) {
-  base::AutoLock auto_lock(lock_);
-  unlogged_samples_->Add(samples);
 }
 
 bool SparseHistogram::AddSamplesFromPickle(PickleIterator* iter) {
-  base::AutoLock auto_lock(lock_);
-  return unlogged_samples_->AddFromPickle(iter);
+  return true;
 }
 
 void SparseHistogram::WriteHTMLGraph(std::string* output) const {
--- a/base/metrics/user_metrics.cc
+++ b/base/metrics/user_metrics.cc
@@ -29,6 +29,8 @@ void RecordAction(const UserMetricsActio
 }
 
 void RecordComputedAction(const std::string& action) {
+  return;
+
   if (!g_task_runner.Get()) {
     DCHECK(g_callbacks.Get().empty());
     return;
@@ -46,6 +48,8 @@ void RecordComputedAction(const std::str
 }
 
 void AddActionCallback(const ActionCallback& callback) {
+  return;
+
   // Only allow adding a callback if the task runner is set.
   DCHECK(g_task_runner.Get());
   DCHECK(g_task_runner.Get()->BelongsToCurrentThread());
