# Disable domain reliability component

--- a/components/domain_reliability/google_configs.cc
+++ b/components/domain_reliability/google_configs.cc
@@ -12,7 +12,7 @@
 #include "components/domain_reliability/config.h"
 
 namespace domain_reliability {
-
+#if 0
 namespace {
 
 struct GoogleConfigParams {
@@ -562,17 +562,11 @@ static std::unique_ptr<DomainReliabilityConfig> CreateGoogleConfig(
 }
 
 }  // namespace
-
+#endif
 // static
 void GetAllGoogleConfigs(
     std::vector<std::unique_ptr<DomainReliabilityConfig>>* configs_out) {
   configs_out->clear();
-
-  for (auto& params : kGoogleConfigs) {
-    configs_out->push_back(CreateGoogleConfig(params, false));
-    if (params.duplicate_for_www)
-      configs_out->push_back(CreateGoogleConfig(params, true));
-  }
 }
 
 }  // namespace domain_reliability
--- a/components/domain_reliability/uploader.cc
+++ b/components/domain_reliability/uploader.cc
@@ -75,7 +75,7 @@ class DomainReliabilityUploaderImpl
     VLOG(1) << "Uploading report to " << upload_url;
     VLOG(2) << "Report JSON: " << report_json;
 
-    if (discard_uploads_) {
+    if (true) {
       VLOG(1) << "Discarding report instead of uploading.";
       UploadResult result;
       result.status = UploadResult::SUCCESS;
--- a/components/domain_reliability/bake_in_configs.py
+++ b/components/domain_reliability/bake_in_configs.py
@@ -488,7 +488,7 @@ def origin_is_whitelisted(origin):
     domain = origin[8:-1]
   else:
     return False
-  return any(domain == e or domain.endswith('.' + e)  for e in DOMAIN_WHITELIST)
+  return False
 
 
 def quote_and_wrap_text(text, width=79, prefix='  "', suffix='"'):
--- a/components/domain_reliability/BUILD.gn
+++ b/components/domain_reliability/BUILD.gn
@@ -34,12 +34,21 @@ action("bake_in_configs") {
   # The JSON file list is too long for the command line on Windows, so put
   # them in a response file.
   response_file_contents = rebase_path(inputs, root_build_dir)
-  args = [
-    "--file-list",
-    "{{response_file_name}}",
-    "--output",
-    rebase_path(output_file, root_build_dir),
-  ]
+  if (is_win) {
+      args = [
+        "--file-list",
+        "nul",
+        "--output",
+        rebase_path(output_file, root_build_dir),
+      ]
+  } else {
+        args = [
+        "--file-list",
+        "/dev/null",
+        "--output",
+        rebase_path(output_file, root_build_dir),
+      ]
+  }
 }
 
 component("domain_reliability") {
